# Dependencies
import math
from time import time
import numpy as np
from TreeNode import TreeNode
from state import StateHandler
import random


def monte_carlo_tree_search(root: TreeNode, state_handler: StateHandler, policy, max_itr=0, max_time=0) -> TreeNode:
    """
    Runs the monte carlo tree search algorithm.
    If max_itr is 0, it will run until max_time is reached, else it will run for max_itr iterations.
    Returns the root node of the tree generated with the given root.
    """
    if max_itr == 0:
        start_time = time.time()
        while time.time() - start_time < max_time:
            choosen_node: TreeNode = selection(root)
            created_node = expansion(choosen_node, state_handler)
            result = simulation(created_node)
            backpropagation(created_node, result)
    else:
        itr = 0
        while itr < max_itr:
            choosen_node: TreeNode = selection(root)
            created_node = expansion(choosen_node, state_handler)
            result = simulation(created_node)
            backpropagation(created_node, result)
            itr += 1

    return root


def selection(node: TreeNode) -> TreeNode:
    '''
    This selects the best leaf for expansion.
    For Monte Carlo this is the node that you should expand.
    Given by exploration and exploitation means.
    '''
    child_nodes = node.get_children()
    best_child = None
    best_node_value = 0

    while child_nodes:
        for child_node in child_nodes:
            if (best_node_value < ucb(child_node)):
                best_child = child_node
                best_node_value = ucb(child_node)
        return selection(best_child)
    return node


def expansion(node: TreeNode, state_handler: StateHandler) -> TreeNode:
    """
    Generates a new child to node. It is generated by making a random move, 
    checking if that move has a corresponding child, if not it generates a child with the random move.
    Repeats until a child is generated
    """
    # while True:

    #     generate = True
    #     legal_actions = state_handler.get_legal_actions(node)

    #     if len(legal_actions) == len(node.get_children()):
    #         # all legal actions have already been explored
    #         break

    #     if generate:
    #         new_node = TreeNode(state = None, parent = node)
    #         node.add_child(new_node)
    #         break
    moves = state_handler.get_legal_actions()
    for move in moves:
        new_state = StateHandler(state_handler)
        new_state.step(move)

        child_state = new_state.getBoardState()
        child_node = TreeNode(child_state, node)
        new_state.stepBack()
    if node.getChildren():
        return random.choice(node.getChildren())
    else:
        return node


def defaultPolicy(game: StateHandler, model=None):
    '''
    choosing moves in simulations/rollout
    '''
    if model != None:
        model_prediction: torch.Tensor = model(game.getBoardState())
        np_arr: np.array = model_prediction.detach().numpy()
        best_move = np.argmax(np_arr)
        best_move += 1
        return best_move
    else:
        return choose_move(game.get_legal_actions())


def choose_move(legal_actions: list):
    """"
    Takes in legal moves an chooses one of them at random
    """
    index = random.randint(0, len(legal_actions)-1)
    move = legal_actions[index]
    return move


def simulation(node: TreeNode) -> int:
    """
    In this process, a simulation is performed by choosing moves or strategies until a result or predefined state is achieved.
    """
    state = node.get_state()
    while state.is_finished():
        legal_action = state.get_legal_actions()
        state.move(choose_move(legal_action))  # TODO refactor

    return state.get_winner()


def backpropagation(node: TreeNode, result: int) -> None:
    """
    After determining the value of the newly added node, the remaining tree must be updated. 
    So, the backpropagation process is performed, where it backpropagates from the new node to the root node. 
    During the process, the number of simulation stored in each node is incremented. Also, if the new nodeâ€™s 
    simulation results in a win, then the number of wins is also incremented.
    """
    node.add_visits()
    node.add_reward(result)
    if not node.is_root():  # if node is not root, then it has a parent and backpropagates to it
        backpropagation(node.get_parent(), -result)

def ucb(node: TreeNode):
    """
    Takes in node and returns upper confidence bound based on parent node visits and node visits
    """
    exploration_parameter = math.sqrt(2)
    exploitation = node.get_wins()/node.get_visits()
    exploration = np.sqrt(
        np.log(node.get_parent().get_visits())/node.get_visits())
    return exploitation + exploration_parameter*exploration
